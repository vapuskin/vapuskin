esphome:
  name: hamsterew
  friendly_name: hamsterew

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "***"

ota:
  - platform: esphome
    password: "***"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Hamsterew Hotspot"
    password: "***"


web_server: # creates a web server where you can access all this stuff without home assistant (good for debugging or working headless (no HA))
  port: 80
  include_internal: true
  ota: true

captive_portal:

globals:
  - id: revolution_count
    type: int
    restore_value: no
    initial_value: '0'
  - id: last_time
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: distance_traveled
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: wheel_circumference
    type: float
    restore_value: no
    initial_value: '0.512'  # Окружность колеса в метрах
  - id: wheel_revolutions_count
    type: int
    restore_value: no
    initial_value: '0'

binary_sensor:
  - platform: gpio
    pin: GPIO2
    name: "Wheel Revolutions"
    id: wheel_revolutions
    device_class: running
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - lambda: |-
            id(revolution_count) += 1;
            id(distance_traveled) += id(wheel_circumference);
            id(wheel_revolutions_count) += 1;
            unsigned long current_time = millis();
            if (current_time - id(last_time) >= 1000) {
              float speed = (id(revolution_count) * id(wheel_circumference)) * 3.6; // скорость в км/ч
              id(speed_sensor).publish_state(speed);
              id(revolution_count) = 0;
              id(last_time) = current_time;
            }
    internal: true
    
  - platform: template
    name: "Wheel Hamster Status"
    id: wheel_revolutions_inverted
    device_class: running
    lambda: |-
      return !id(wheel_revolutions).state;

sensor:

  - platform: template
    name: "Revolution Count"
    id: revolution_count_sensor
    unit_of_measurement: "revs"
    lambda: |-
      return id(revolution_count);
    internal: true
  - platform: template

    name: "Speed"
    id: speed_sensor
    unit_of_measurement: "km/h"
    lambda: |-
      return id(speed_sensor).state;

  - platform: template
    name: "Distance Traveled (km)"
    id: distance_traveled_km_sensor
    unit_of_measurement: "km"
    accuracy_decimals: 2
    lambda: |-
      return id(distance_traveled) / 1000.0;

  - platform: template
    name: "Distance Traveled (m)"
    id: distance_traveled_m_sensor
    unit_of_measurement: "m"
    accuracy_decimals: 2
    lambda: |-
      return id(distance_traveled);

  - platform: template
    name: "Wheel Revolutions Count"
    id: wheel_revolutions_count_sensor
    unit_of_measurement: "counts"
    lambda: |-
      return id(wheel_revolutions_count);

button:
  - platform: restart
    name: Restart Powermeter
